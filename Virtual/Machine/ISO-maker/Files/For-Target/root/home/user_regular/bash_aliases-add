# ; -*- mode: sh ;-*- ;;; tells emacs to edit in shell script mode
# Econ-ARK customizations for interactive shells

# Get paths that everybody should have 
[[ -e /etc/environment ]] && source /etc/environment

if [[ -e /var/local/status/verbose ]]; then
    set -x && set -v
    datetime="$(date +%Y%m%d%H%M)"
    [[ -e /var/local/status/bash_aliases.log ]] && mv /var/local/status/bash_aliases_$datetime.log
    exec > >(tee -i /var/local/status/bash_aliases.log)
    exec 2>&1
fi

[[ ! -t 0 ]] && return # it is not an interactive shell; Google "test interactive shell"

if [[ "$DISPLAY" != "" ]]; then # running in Xwindows gui
    xset s off # Disable power management (prevent screen blank)
    
    # Allow cut-and-paste between emacs and shell in xwindows
    if [[ "$(which autocutsel)" != "" ]]; then
	autocutsel -fork -selection PRIMARY
    fi
fi

# Modify prompt to keep track of git branches
parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}
export PS1="\u@\h:\W\$(parse_git_branch)\[\033[00m\] $ "

# If it is not already running, launch the vncserver
# Makes it easier to connect to the VM - if it is on a network you can reach

pgrep x0vncserver > /dev/null # Silently get the process ID of running vncserver (if any)
pgrep_process_exists="$?" # 1 if the previous command did NOT find any matching process
if [[ "$process_exists" -eq 1 ]] && [[ "$DISPLAY" != "" ]]; then # start vnc server
    cmd="xfce4-terminal --title=x0vncserver-about --minimize --command='x0vncserver -display :0.0 -PasswordFile=$HOME/.vnc/passwd' --execute xset -r"
    echo "$cmd" # show
    eval "$cmd" # do
fi

# Root user shares the useful stuff above, but not the stuff below this "if":
if [[ "$USER" == "root" ]]; then
    return # End of stuff that root user should do
fi

# Remainder to be executed the first time a user logs into an interactive GUI shell

# Prior to first boot of Econ-ARK machine, start.sh script is run and machine reboots
# Interactive login first happens after that boot, and launches this script
# So .gui_user_login_first.flag and .gui_user_login_second.flag here
# are on second and third boots

# If this is the first login with the GUI
if [[ "$DISPLAY" != "" ]] && [[ ! -e /home/$USER/.gui_user_login_first.flag ]]; then

    # If all three of the tests below succeed, you are running in VB environment
    # Repeated keys does not work well on VirtualBox; xset r off turns off repeats
    [[ "$(which lshw)" ]] && vbox="$(lshw 2>/dev/null | grep VirtualBox) "  && [[ "$vbox" != "" ]] && xset r off
    
    pkill xfce4-screensaver # Prevent screensaver from activating while software installing
    
    # Run emacs in batch mode to let it configure itself for GUI
    emacs -batch -l     /home/$myuser/.emacs  

    # Configure backdrop - can't be done in start.sh or finish.sh because dbus not running until GUI is up
    # Wait until monitor is up (xrandr finds an active monitor) then get the name of the active monitor

    # delete .gui_user_login_second.flag which might be present if this is a reinstall
    [[ -e /home/$USER/.gui_user_login_second.flag ]] && rm -f /home/$USER/.gui_user_login_second.flag 

    # Wait for the monitor to be active before configuring it 
    monitor=""  
    while [[ "$monitor" == "" ]] ; do 
	echo 'Waiting for monitor to come up ...'
	cmd="$(xrandr --listactivemonitors | tail -n 1 | rev | cut -d' ' -f1 | rev)"
	echo "$cmd"
    	monitor="$cmd"
    	sleep 1
    done

    # Screensavers interfere with finishing the installation
    /var/local/tools/turn-off-screensavers.sh

    # Set up Econ-ARK backdrop
    /var/local/config/backdrop.sh

    # Default xfwm4 compositor is extremely slow; disabling it speeds everything up a lot
    xfwm4compositorstatus="$(xfconf-query --channel xfwm4 --property /general/use_compositing --list)"
    xfwm4compositorstatusExists="$?"
    [[ "$xfwm4compositorstatusExists" == "0" ]] && xfconf-query --channel xfwm4 --property /general/use_compositing --type 'bool' --set false
    
    # pop up a window containing a live scrolling update of steps
    # occurring via the start.sh and finish.sh installation scripts
    xfce4-terminal --geometry 132x24+0-0 --command "bash -c 'tail --follow /var/local/status/start-and-finish.log'"  &  # Watch

    echo ''
    echo 'WARNING: Machine should reboot whenever software install completes'
    echo ''
    
    touch /home/$USER/.gui_user_login_first.flag  # Signal that first GUI boot user login has succeeded
fi

# Stuff to run if first gui user login setup has finished and software install has finished
if [[ "$DISPLAY" != "" ]] &&
       [[   -e /home/$USER/.gui_user_login_first.flag  ]] &&
       [[ ! -e /home/$USER/.gui_user_login_second.flag ]] &&
       [[ -e /var/local/status/finished-software-install.flag ]]; then

    # view "About This Machine"
    emacs --name "Emacs Editor" --geometry 80x28-100+0 /var/local/About_This_Install/XUBUNTARK.md &> /dev/null  &

    # echo ''
    # echo 'Now download the installer ISO to the Desktop of this machine'
    # echo '(So you can recreate the machine in its pristine form later)'
    # echo ''
    # echo ''
    # echo 'Hit return to launch firefox at the appropriate link:'
    # read answer

    # firefox 'https://drive.google.com/drive/folders/1FjI6ORW45gNKVpLe_-NuZxF61T4i-0kD?usp=sharing' &
    touch /home/$USER/.gui_user_login_second.flag
fi

# All subsequent GUI logins
if [[ "$DISPLAY" != "" ]] &&
       [[ -e /home/$USER/.gui_user_login_first.flag ]] &&
       [[ -e /home/$USER/.gui_user_login_second.flag ]]	&&
       [[ -e /var/local/status/finished-software-install.flag ]] &&
       [[ ! -e /home/$USER/.first_interactive_shell.flag ]]; then
    vHARK="$(python -c 'import HARK ; print(HARK.__version__)')"
    echo "XUBUNTARK, HARK version $vHARK, https://econ-ark.org"
    
    [[ "$(which conda)" != "" ]] && echo 'To install conda packages: "sudo mamba install [package-name]"' # Conda is installed only on XUBUNTARKMAX
    echo 'To install pip   packages: "sudo pip   install [package-name]"' # pip is installed by root user -- probably a mistake but ...
    echo "To upgrade HARK, 'sudo pip install --upgrade econ-ark' "
    echo ''
    echo 'Scaling too large: "bash -u /var/local/tools/xfce-scaling-shrink-me.sh"'
    echo 'Scaling too small: "bash -u /var/local/tools/xfce-scaling-grow-me.sh"'
    echo ''
    touch /home/econ-ark/.first_interactive_shell.flag
fi
