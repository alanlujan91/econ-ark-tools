# ; -*- mode: sh ;-*- ;;; tells emacs to edit in shell script mode
# Econ-ARK customizations for interactive shells

# Get paths that everybody should have 
[[ -e /etc/environment ]] && source /etc/environment

# Disable power management (prevent screen blank)
[[ "$DISPLAY" != "" ]] && xset s off -dpms

# Allow cut-and-paste between emacs and shell
if [[ "$(which autocutsel)" != "" ]]; then
    if [[ "$DISPLAY" != "" ]]; then
	autocutsel -fork -selection PRIMARY
    fi
fi

# Modify prompt to keep track of git branches
parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}
export PS1="\u@\h:\W\$(parse_git_branch)\[\033[00m\] $ "

# If not already running, launch the vncserver
# Makes it easier to connect to the VM - if it is on a network you can reach

cmd=""
pgrep x0vncserver > /dev/null # Silence it
#  "$?" -eq 1 implies that no such process exists, in which case it should be started
[[ "$?" -eq 1 ]] && [[ "$DISPLAY" != "" ]] && cmd="xfce4-terminal --minimize --command='x0vncserver -display :0.0 -PasswordFile=$HOME/.vnc/passwd'"
eval "$cmd"


if [[ "$(which conda)" != "" ]]; then
    # >>> conda initialize >>>
    # !! Contents within this block are managed by 'conda init' !!
    __conda_setup="$('/usr/local/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
    if [ $? -eq 0 ]; then
	eval "$__conda_setup"
    else
	if [ -f "/usr/local/anaconda3/etc/profile.d/conda.sh" ]; then
            . "/usr/local/anaconda3/etc/profile.d/conda.sh"
	else
            export PATH="/usr/local/anaconda3/bin:$PATH"
	fi
    fi
fi

# Root user shares the useful stuff above 
if [[ "$USER" == "root" ]]; then
    return # End of stuff that root user should do
fi

# Stuff to be executed only the first time a user logs into an interactive GUI shell
# On first boot, /etc/rc.local will run start.sh and then reboot without interactive login
# Interactive login first happens after that boot, and launches this script
# So .first_user_login and .second_user_login here are on second and third boots

# If we've got a graphical display but the software hasn't finished installing
if [[ "$DISPLAY" != "" ]] && [[ ! -e /home/econ-ark/.first_user_login ]]; then
    [[ "$(which lshw)" ]] && vbox="$(lshw 2>/dev/null | grep VirtualBox) "  && [[ "$vbox" != "" ]] && xset r off # Repeated keys does not work well on VirtualBox

    touch /home/econ-ark/.first_user_login  # Signal that first GUI boot user login has succeeded
    pkill xfce4-screensaver # Prevent screensaver from activating while software installing
    # Configure backdrop - can't be done in start.sh or finish.sh because dbus not running until GUI is up
    # Wait until monitor is up (xrandr finds an active monitor) then get the name of the active monitor

    # delete .second_user_login which might be present if this is a reinstall
    [[ -e /home/econ-ark/.second_user_login ]] && rm -f /home/econ-ark/.second_user_login 

    # Disable screen locking on the first boot
    # Copy-and-pasted from code that definitely works for the second boot
    # For some reason, it does not seem always to "stick" when done here, so repeated for second login

    monitor=""  
    while [[ "$monitor" == "" ]] ; do # 
	monitor="$(xrandr --listactivemonitors | tail -n 1 | rev | cut -d' ' -f1 | rev)"
	sleep 1
    done

    monitorPath="/backdrop/screen0/monitor$monitor/workspace0" # Get the property name of the monitor

    # #    xfconf-query --channel xfce4-desktop --property "$monitorPath/last-image"  --set /usr/share/xfce4/backdrops/Econ-ARK-Logo-1536x768.jpg
    # #    xfconf-query --channel xfce4-desktop --property "$monitorPath/image-style" --set 4 # Scaling

    # Set background to black (rgba1 property, if it exists)
    black="--type double --set 0.0 --type double --set 0.0 --type double --set 0.0 --type double --set 1.0" 

    # For some bizarre reason, can't use "$black" shell variable in the command, so spell it out
    xfconf-query --channel xfce4-desktop --property "$monitorPath/rgba1" --type double --set 0.0 --type double --set 0.0 --type double --set 0.0 --type double --set 1.0 &> /dev/null
    if [[ $? != 0 ]]; then # the rgb property did not exist - so create it 
	xfconf-query --create --channel xfce4-desktop --property "$monitorPath/rgba1" --type double --set 0.0 --type double --set 0.0 --type double --set 0.0 --type double --set 1.0
    fi

    # Turn off ALL the possible ways the screen might get locked -- user can undo this later
    # xfce4-session property /shutdown/LockScreen is one of (far too many) ways to lock the screen
    xfconf-query --channel xfce4-session --property /shutdown/LockScreen &> /dev/null # Querying its value gives an error if it does not exist
    shutdownLockscreenCode="$?" # If it does NOT exist, the code will be NOT be zero
    # If it DOES exist set it to zero
    [[ "$shutdownLockscreenCode" == "0" ]] && xfconf-query --channel xfce4-session --property /shutdown/LockScreen --set false 

    # Power manager is another way to lock 
    xfce4powermanagerexists="$(xfconf-query --channel xfce4-power-manager --list &>/dev/null)" # Not sure whether it's running now or not
    xfce4powermanagerexistsCode="$?" # If zero, it is running -- so quit it (because it causes crash error if reboot happens while running)
    [[ "xfce4powermanagerexistsCode" == "0" ]] && xfce4-power-manager --quit
    
    # Properties can be set even if it is not running     
    xfconf-query --channel xfce4-power-manager --property /xfce4-power-manager/blank-on-ac --set 9999 # a lot of minutes pre-blank!
    xfconf-query --channel xfce4-power-manager --property /xfce4-power-manager/lock-screen-suspend-hibernate --set false &>/dev/null 
    xfconf-query --channel xfce4-power-manager --property /xfce4-power-manager/dpms-enabled                  --set false &>/dev/null 

    # Default xfwm4 compositor is extremely slow; disabling it speeds everything up a lot
    xfwm4compositorstatus="$(xfconf-query --channel xfwm4 --property /general/use_compositing --list)"
    xfwm4compositorstatusExists="$?"
    [[ "$xfwm4compositorstatusExists" == "0" ]] && xfconf-query --channel xfwm4 --property /general/use_compositing --type 'bool' --set false
    
    # Screensaver is a THIRD way to lock the screen
    LockScreenExists="$(xfconf-query --channel xfce4-screensaver --property /lock/enabled --set false &>/dev/null)"
    lockEnabled="$?" # If it does not exist, create it 
    [[ "$lockEnabled" != "0" ]] && xfconf-query --create --channel xfce4-screensaver --property /lock/enabled --type 'bool' --set false

    # Monitor installations occurring via the start.sh and finish.sh installation scripts
    xfce4-terminal --geometry 132x24+0-0 --command "bash -c 'tail -F /var/local/start-and-finish.log'"  &  # Watch

    echo ''
    echo 'WARNING: Machine will reboot whenever software install completes'
    echo ''
fi

# Run this if first user login setup has finished and software install has finished but second interactive login has not occurred yet
if [[ -e /home/econ-ark/.first_user_login ]] && [[ "$DISPLAY" != "" ]] && [[ -e /var/local/finished-software-install ]] && [[ ! -e /home/econ-ark/.second_user_login ]]; then
    touch /home/econ-ark/.second_user_login
    # In case monitor config did not stick, redo it 
    monitor=""  
    while [[ "$monitor" == "" ]] ; do # 
    	monitor="$(xrandr --listactivemonitors | tail -n 1 | rev | cut -d' ' -f1 | rev)"
    	sleep 1
    done

    monitorPath="/backdrop/screen0/monitor$monitor/workspace0" # Get the property name of the monitor
    xfconf-query --channel xfce4-desktop --property "$monitorPath/last-image"  --set /usr/share/xfce4/backdrops/Econ-ARK-Logo-1536x768.jpg
    xfconf-query --channel xfce4-desktop --property "$monitorPath/image-style" --set 4 # Scaling

    # Set background to black (rgba1 property, if it exists)
    black="--type double --set 0.0 --type double --set 0.0 --type double --set 0.0 --type double --set 1.0" 

    # For some bizarre reason, can't use "$black" shell variable in the command, so spell it out
    xfconf-query --channel xfce4-desktop --property "$monitorPath/rgba1" --type double --set 0.0 --type double --set 0.0 --type double --set 0.0 --type double --set 1.0 &> /dev/null
    if [[ $? != 0 ]]; then # the rgb property did not exist - so create it 
    	xfconf-query --create --channel xfce4-desktop --property "$monitorPath/rgba1" --type double --set 0.0 --type double --set 0.0 --type double --set 0.0 --type double --set 1.0
    fi

    # Turn off ALL the possible ways the screen might get locked -- user can undo this later
    # xfce4-session property /shutdown/LockScreen is one of (far too many) ways to lock the screen
    xfconf-query --channel xfce4-session --property /shutdown/LockScreen &> /dev/null # Querying its value gives an error if it does not exist
    shutdownLockscreenCode="$?" # If it does NOT exist, the code will be NOT be zero
    # If it DOES exist set it to zero
    [[ "$shutdownLockscreenCode" == "0" ]] && xfconf-query --channel xfce4-session --property /shutdown/LockScreen --set false 

    # Power manager is another way to lock 
    xfce4powermanagerexists="$(xfconf-query --channel xfce4-power-manager --list &>/dev/null)" # Not sure whether it's running now or not
    xfce4powermanagerexistsCode="$?" # If zero, it is running -- so quit it (because it causes crash error if reboot happens while running)
    [[ "xfce4powermanagerexistsCode" == "0" ]] && xfce4-power-manager --quit

    # Properties can be set even if it is not running     
    xfconf-query --channel xfce4-power-manager --create --property /xfce4-power-manager/blank-on-ac --set 9999 # a lot of minutes pre-blank!
    xfconf-query --channel xfce4-power-manager --create --property /xfce4-power-manager/lock-screen-suspend-hibernate --set false &>/dev/null 
    xfconf-query --channel xfce4-power-manager --create --property /xfce4-power-manager/dpms-enabled                  --set false &>/dev/null 

    # Screensaver is a THIRD way to lock the screen
    LockScreenExists="$(xfconf-query --channel xfce4-screensaver --property /lock/enabled --set false &>/dev/null)"
    lockEnabled="$?" # If it does not exist, create it 
    [[ "$lockEnabled" != "0" ]] && xfconf-query --create --channel xfce4-screensaver --property /lock/enabled --type 'bool' --set false
    emacs -batch -l     /home/econ-ark/.emacs  # Run in batch mode to setup everything
    emacs --name "Emacs Editor" --geometry 80x28-100+0 /var/local/XUBUNTARK.md &> /dev/null  &

    touch /home/econ-ark/.second_user_login_finished

    # echo ''
    # echo 'Now download the installer ISO to the Desktop of this machine'
    # echo '(So you can recreate the machine in its pristine form later)'
    # echo ''
    # echo ''
    # echo 'Hit return to launch firefox at the appropriate link:'
    # read answer

    # firefox 'https://drive.google.com/drive/folders/1FjI6ORW45gNKVpLe_-NuZxF61T4i-0kD?usp=sharing' &
fi

# All subsequent logins
if [[ -e /home/econ-ark/.first_user_login ]] && [[ "$DISPLAY" != "" ]] && [[ -e /var/local/finished-software-install ]] && [[ -e /home/econ-ark/.second_user_login ]] && [[ ! -e /home/econ-ark/.first_interactive_shell ]]; then
    vHARK="$(python -c 'import HARK ; print(HARK.__version__)')"
    echo "XUBUNTARK, HARK version $vHARK, https://econ-ark.org"
    
    [[ "$(which conda)" != "" ]] && echo 'To install conda packages: "sudo mamba install [package-name]"' # Conda is installed only on XUBUNTARKMAX
    echo 'To install pip   packages: "sudo pip   install [package-name]"' # pip is installed by root user -- probably a mistake but ...
    echo "To upgrade HARK, 'sudo pip install --upgrade econ-ark' "
    echo ''
    echo 'Scaling too large: "bash -u /var/local/xfce-scaling-shrink-me.sh"'
    echo 'Scaling too small: "bash -u /var/local/xfce-scaling-grow-me.sh"'
    echo ''
    touch /home/econ-ark/.first_interactive_shell
fi
